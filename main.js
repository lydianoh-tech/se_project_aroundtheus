!function(){"use strict";class t{constructor(t,e){let{items:s,renderer:r}=t;this._items=s,this._renderer=r,this._container=document.querySelector(e)}renderItems(){this._items.forEach((t=>{this._renderer(t)}))}addItem(t){this._container.prepend(t)}}class e{constructor(t){this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(t){"Escape"===t.key&&this.close()}setEventListeners(){this._popup.addEventListener("click",(t=>{(t.target.classList.contains("modal__close-icon")||t.target===this._popup)&&this.close()}))}}class s extends e{constructor(t,e){super(t),this._form=this._popup.querySelector(".modal__form"),this._inputList=this._form.querySelectorAll(".modal__input"),this._submitButton=this._popup.querySelector(".modal__submit-button"),this._submitBtnText=this._submitButton.textContent,this._handleFormSubmit=e}getForm(){return this._form}renderLoading(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=t?e:this._submitBtnText}_getInputValues(){const t={};return this._inputList.forEach((e=>{t[e.name]=e.value})),t}setInputValues(t){this._inputList.forEach((e=>{e.value=t[e.name]}))}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}setButtonText(t){this._submitButton&&(this._submitButton.textContent=t)}getButtonText(){return this._submitButton?this._submitButton.textContent:""}}class r{constructor(t,e,s,r,i){this._data=t,this._likes=t.likes||[],this._ownerId=t.owner,this._userId=t.currentUserId,this._id=t._id||t.id,this._name=t.name,this._link=t.link,this._cardSelector=e,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=i}_updateLikesView(){this.isLiked()?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.toggle("card__like-button_active",this.isLiked())}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}isLiked(){return this._data.isLiked}setLikesInfo(t){this._data=t,this._updateLikesView()}_setEventListeners(){this._cardImageElement.addEventListener("click",(()=>{this._handleImageClick(this._name,this._link)})),this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this._id,this.isLiked())})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteClick(this._id,this._element)}))}generateCard(){return this._element=this._getTemplate(),this._cardImageElement=this._element.querySelector(".card__image"),this._likeButton=this._element.querySelector(".card__like-button"),this._deleteButton=this._element.querySelector(".card__delete-button"),this._element.querySelector(".card__title").textContent=this._name,this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._updateLikesView(),this._setEventListeners(),this._element}updateCard(){this._cardImageElement.src=this._link,this._cardImageElement.alt=this._name,this._titleElement.textContent=this._name,this._likeCountElement.textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}updateLikes(t){this._likes=t,this._updateCard()}}class i{constructor(t,e){this.settings=t,this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._formElement=e,this._inputList=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}_showError(t){const e=this._formElement.querySelector(`#${t.id}-error`);e&&(e.textContent=t.validationMessage,e.classList.add(this._errorClass)),t.classList.add(this._inputErrorClass)}_hideError(t){const e=this._formElement.querySelector(`#${t.id}-error`);e&&(e.textContent="",e.classList.remove(this._errorClass)),t.classList.remove(this._inputErrorClass)}_checkInputValidity(t){t.validity.valid?this._hideError(t):this._showError(t)}_toggleButtonState(){this._inputList.every((t=>t.validity.valid))?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):this.disableButton()}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(t=>{t.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputList.forEach((t=>this._hideError(t))),this._toggleButtonState()}}const n={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__submit-button",inactiveButtonClass:"modal__submit-button_type_disabled",inputErrorClass:"popup__input_type_error",errorClass:"modal__error"};document.querySelector("#profile__edit-button"),document.querySelector("#profile__modal"),document.querySelector("#modal__profile-title"),document.querySelector("#profile__title"),document.querySelector("#profile__description"),document.querySelector("#profile__name-input"),document.querySelector("#profile__description-input"),document.querySelector("#profile__add-button"),document.querySelector("#cards__list"),document.querySelector("#cards__template").content.querySelector(".card");const o=document.forms.profile__form,a=document.forms.card__form,l=(document.querySelector("#add__card-modal"),document.querySelector("#add__card-title"),document.querySelector("#add__card-name"),document.querySelector("#add__card-link"),document.querySelector("#image__modal")),d=(l.querySelector("#image__link"),l.querySelector("#image__title"),new class{constructor(t){let{baseUrl:e,headers:s}=t;this._baseUrl=e,this._headers=s}_checkResponse(t){return t.ok?t.json():Promise.reject(`Error: ${t.status}`)}_request(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const s={headers:this._headers,...e},r=`${this._baseUrl}${t}`;return fetch(r,s).then(this._checkResponse)}getUserInfo(){return this._request("/users/me")}updateProfile(t){let{name:e,about:s}=t;return this._request("/users/me",{method:"PATCH",body:JSON.stringify({name:e,about:s})})}updateAvatar(t){return this._request("/users/me/avatar",{method:"PATCH",body:JSON.stringify({avatar:t})})}getInitialCards(){return this._request("/cards")}addCard(t){let{name:e,link:s}=t;return this._request("/cards",{method:"POST",body:JSON.stringify({name:e,link:s})})}deleteCard(t){return this._request(`/cards/${t}`,{method:"DELETE"})}likeCard(t){return this._request(`/cards/${t}/likes`,{method:"PUT"})}unlikeCard(t){return this._request(`/cards/${t}/likes`,{method:"DELETE"})}getAppData(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"1c65c6f1-abdd-470a-ae4d-370153ad05d9","Content-Type":"application/json"}})),_=new class{constructor(t){let{nameSelector:e,jobSelector:s,avatarSelector:r}=t;this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,job:this._jobElement.textContent}}getUserId(){return this._userId}setUserInfo(t){let{name:e,job:s,avatar:r,id:i}=t;this._nameElement.textContent=e,this._jobElement.textContent=s,this.setUserAvatar(r),this._userId=i}setUserAvatar(t){this._avatarElement.src=t}}({nameSelector:"#profile__title",jobSelector:"#profile__description",avatarSelector:".profile__image"});function c(t){const e={...t,currentUserId:_.getUserId()},s=new r(e,"#cards__template",((t,e)=>{u.open({name:t,link:e})}),v,((t,e)=>(e?d.unlikeCard(t):d.likeCard(t)).then((t=>{s.setLikesInfo(t)})).catch((t=>{console.error("Error liking card:",t)}))));return s.generateCard()}const u=new class extends e{constructor(t){super(t),this._image=this._popup.querySelector(".modal__image-link"),this._caption=this._popup.querySelector(".modal__image-title")}open(t){let{name:e,link:s}=t;this._image.src=s,this._image.alt=e,this._caption.textContent=e,super.open()}}("#image__modal");let h;u.setEventListeners(),Promise.all([d.getUserInfo(),d.getInitialCards()]).then((e=>{let[s,r]=e;_.setUserInfo({name:s.name,job:s.about,avatar:s.avatar,id:s._id}),h=new t({items:r,renderer:t=>{const e=c(t);h.addItem(e)}},"#cards__list"),h.renderItems()})).catch((t=>{console.error("Error loading app data:",t)}));const m=new class extends e{constructor(t,e){super(t),this._handleConfirm=e,this._confirmButton=this._popup.querySelector("#delete__card-confirm-button")}setEventListeners(){this._confirmButton.addEventListener("click",(t=>{t.preventDefault(),this._handleConfirm()})),super.setEventListeners()}setButtonText(t){this._confirmButton&&(this._confirmButton.textContent=t)}}("#delete__card-modal",(()=>{d.deleteCard(p).then((()=>{E.remove(),m.close()})).catch((t=>{console.error("Error deleting card:",t)})).finally((()=>{m.setButtonText("Yes")})),console.log(p)}));m.setEventListeners();let p=null,E=null;function v(t,e){p=t,E=e,m.open()}function f(t,e,s){t.renderLoading(!0),e.then((e=>{s(e),t.close()})).catch((t=>{console.error("Error:",t)})).finally((()=>{t.renderLoading(!1)}))}const b=new s("#profile__modal",(t=>{f(b,d.updateProfile({name:t.name,about:t.description}),(t=>{_.setUserInfo({name:t.name,job:t.about,avatar:t.avatar,id:t._id})}))}));b.setEventListeners();const S=new s("#add__card-modal",(t=>{f(S,d.addCard({name:t.title,link:t.image}),(t=>{const e=c(t);h.addItem(e),a.reset(),L.disableButton()}))}));S.setEventListeners();const k=new s("#update__avatar-modal",(t=>{f(k,d.updateAvatar(t.avatar),(t=>{_.setUserAvatar(t.avatar)}))}));k.setEventListeners(),document.querySelector("#profile__edit-button").addEventListener("click",(()=>{const t=_.getUserInfo();b.setInputValues({name:t.name,description:t.job}),b.open()})),document.querySelector("#profile__add-button").addEventListener("click",(()=>{S.open()})),document.querySelector("#profile__avatar-edit-button").addEventListener("click",(()=>{k.open()}));const g=new i(n,o),L=new i(n,a),y=new i(n,document.querySelector("#update__avatar-form"));g.enableValidation(),L.enableValidation(),y.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,